<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 

<mapper namespace="edu.study.mapper.boardMapper">
	<select id="listSearch" parameterType="scri"
		resultType="BoardVo">
			SELECT * FROM (
			SELECT rownum as rnum, A.* FROM (
			SELECT * FROM
			table_board
			WHERE bdelete='N' AND blist=#{blist}
			<include refid="search"></include>
			ORDER BY bidx desc) A
			)WHERE rnum BETWEEN #{rowStart} AND #{rowEnd}
		</select>
	
		<select id="listCount" resultType="int">
			SELECT COUNT(bidx)
			FROM table_board
			WHERE bidx>0 and bdelete='N'
			<include refid="search"></include>
		</select>
	
		<sql id="search">
			<if test="searchType == 'btitle'">AND btitle LIKE '%'||#{keyWord}||'%'</if>
			<if test="searchType == 'bcontent'"> AND bcontent LIKE '%'||#{keyWord}||'%'</if>
		</sql>

	<select id="selectByBidx" parameterType="int"
		resultType="BoardVo">	<!-- 데이터 타입 정의/브이오에 담겠다 -->
		select bidx
		,boriginbidx
		,bdepth
		,blvl
		,blist
		,bcategory
		,btitle
		,bwriter
		,bcontent
		,bwdate
		,brewdate
		,bstate
		,bmdate
		,bdelete
		,bsecret
		,bhit
		,midx
		from table_board
		where bidx = #{bidx}	<!-- 변수명을 이용 -->
	</select>

	<update id="updateByBidx" parameterType="boardVo">
		update table_board
		set btitle = #{btitle}
		,bcontent = #{bcontent}
		where bidx = #{bidx}
	</update>

	<insert id="insert" parameterType="boardVo">
		<![CDATA[
		insert into table_board (
			bidx
			,btitle
			,bcontent
			,bwdate
			,bhit
			,blist
			,bwriter
		)values(
			bidx_seq.nextval
			,#{btitle}
			,#{bcontent}
			,sysdate			
			,0
			,#{blist}
			,'관리자'
		)
		
		]]>
		<selectKey resultType="int" keyProperty="bidx" order="AFTER">
			select max(bidx)	<!-- 하나의 맵퍼에서 두가지 처리 -->
			from table_board
		</selectKey> 
	</insert>
	
	<delete id="deleteByBidx" parameterType="int">
		update table_board
			set bdelete = 'Y'
			where bidx = #{bidx}
	</delete>
	
	<update id="boardHitUpdate" parameterType="int">
		update table_board 
		set bhit = bhit + 1 
		where bidx = #{bidx}
	</update>
	
	<insert id="fileInsert" parameterType="HashMap">
		INSERT INTO TABLE_FILE(
	 		fidx, 
			bidx,
			originname,
			storedname
		)VALUES(
	  		fidx_seq.nextval,
			#{bidx},
			#{originname},
			#{storedname}
		)
	</insert>
	
	<select id="selectFileByBidx" parameterType="int" resultType="fileVO">
		SELECT * FROM table_file where bidx = #{bidx}
	</select> 
	
	<!-- 댓글쓰기 -->
	
	
	
<!-- 	<insert id="reply_write" parameterType="ReplyVO">
		insert into TABLE_REPLY
		values(0, #{bidx}, #{midx}, #{pgrp}, 0, #{pcontent}, sysdate)
	</insert>
	
	no, grp일치하게함
	<update id="reply_check" parameterType="ReplyVO">
		update TABLE_REPLY set pgrp=#{pgrp}
		where pidx != pgrp
	</update>
	
	보드에 댓글수 증가
	<update id="reply_up" parameterType="boardVo">
		update TABLE_BOARD set reply=reply+1
		where pidx=#{pidx}
	</update>
	
	댓글리스트 가져오기
	<select id="replyList" parameterType="ReplyVO" resultType="ReplyVO">
		select p.pidx, p.bidx, p.pgrp, p.midx, p.pcontent, p.pdate, m.midx from table_reply p left outer join member m
		on p.name = m.mid
		where p.bidx = #{bidx}
		order by pgrp asc, pgrps desc 
	</select>
	
	댓글 추가/삭제시 댓글 갯수 가져오기
	<select id="reply_count" parameterType="boardVo" resultType="boardVo">
		select reply
		from table_board
		where pidx=#{pidx}
	</select>
	
	댓글수 카운트
	<select id="count_rereply" parameterType="ReplyVO" resultType="int">
		select count(pidx)
		from table_reply
		where pidx=#{pidx}
	</select>
	
	댓글 삭제
	<delete id="reply_delete" parameterType="ReplyVO">
		delete from table_reply
		where pidx=#{pidx}
	</delete>
	
	보드에 댓글수 감소
	<update id="reply_down" parameterType="boardVo">
		update table_board set reply=reply-1
		where pidx=#{pidx}
	</update> -->
	
	
	
	
	
	
</mapper>