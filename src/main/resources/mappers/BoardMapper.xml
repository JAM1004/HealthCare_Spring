<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="edu.study.mapper.boardMapper">
	<select id="listSearch" parameterType="scri"
		resultType="BoardVo">		
				
		SELECT A.* FROM (		
			SELECT * FROM table_board
			WHERE bdelete='N'
				and BLIST= #{blist}
				<include refid="search"></include>
			ORDER BY bidx desc) A
			LIMIT #{rowStart},#{rowEnd}
	</select>

	<select id="listCount" parameterType="scri" resultType="int">
		SELECT COUNT(bidx)
		FROM table_board
		WHERE bidx>0 and bdelete='N' and blist=#{blist}
		<include refid="search"></include>
	</select>

	<sql id="search">
		<if test="searchType == 'btitle'">AND btitle LIKE '%#{keyWord}%'</if>
		<if test="searchType == 'bcontent'"> AND bcontent LIKE '%#{keyWord}%'</if>
	</sql>

	<select id="selectByBidx" parameterType="int"
		resultType="BoardVo">	<!-- 데이터 타입 정의/브이오에 담겠다 -->
		select bidx
		,boriginbidx
		,bdepth
		,blvl
		,blist
		,bcategory
		,btitle
		,bwriter
		,bcontent
		,bwdate
		,brewdate
		,bstate
		,bmdate
		,bdelete
		,bsecret
		,bhit
		,MIDX
		from
		table_board
		where bidx = #{bidx}	<!-- 변수명을 이용 -->
	</select>

	<update id="updateByBidx" parameterType="boardVo">
		update table_board
		set
		btitle = #{btitle}
		,bcontent = #{bcontent}
		where bidx = #{bidx}
	</update>

	<insert id="insert" parameterType="boardVo">
		<![CDATA[
		insert into table_board (			
			BTITLE
			,bcontent
			,bwdate
			,bhit
			,blist
			,bwriter			
			,MIDX
		)values(			
			#{btitle}
			,#{bcontent}
			,now()			
			,0
			,#{blist}
			,#{mname}			
			,#{midx}
		)
		
		]]>
		<selectKey resultType="int" keyProperty="bidx" order="AFTER">
			select max(bidx)	<!-- 하나의 맵퍼에서 두가지 처리 -->
			from table_board
		</selectKey>
	</insert>

	<delete id="deleteByBidx" parameterType="int">
		update table_board
		set bdelete = 'Y'
		where bidx = #{bidx}
	</delete>

	<update id="boardHitUpdate" parameterType="int">
		update table_board
		set bhit = bhit + 1
		where bidx = #{bidx}
	</update>

	<insert id="fileInsert" parameterType="HashMap">
		INSERT INTO TABLE_FILE(
		bidx,
		originname,
		storedname
		)VALUES(
		#{bidx},
		#{originname},
		#{storedname}
		)
	</insert>

	<select id="selectFileByBidx" parameterType="int"
		resultType="fileVO">
		SELECT * FROM table_file where bidx = #{bidx}
	</select>

	<select id="replyCount" resultType="int">
		SELECT
		COUNT(*)
		FROM TABLE_REPLY
	</select>

	<insert id="replyInsert" parameterType="ReplyVO">
		INSERT INTO TABLE_REPLY(
		BIDX
		, PCONTENT
		, PWRITER
		, PGRP
		, PGRPS
		, PTITLE
		, PDATE
		)VALUES(
		#{bidx}
		, #{pcontent}
		, #{pwriter}
		, #{pgrp}
		, #{pgrps}
		, #{ptitle}
		, sysdate
		)
	</insert>

	<update id="replyUpdate" parameterType="ReplyVO">
		UPDATE TABLE_REPLY
		SET
		PCONTENT = #{pcontent}
		WHERE PIDX = #{pidx}
	</update>

	<delete id="replyDelete" parameterType="int">
		DELETE FROM TABLE_REPLY WHERE PIDX = #{pidx}
	</delete>

	<select id="replyList" parameterType="int" resultType="ReplyVO">
		SELECT *
		FROM TABLE_REPLY
		where BIDX = #{bidx}
	</select>

	<update id="like_check" parameterType="HashMap">
		UPDATE TABLE_LIKE
		SET like_check = like_check + 1
		WHERE MIDX=#{midx} AND PIDX=#{pidx}
	</update>

	<update id="like_check_cancel" parameterType="HashMap">
		UPDATE TABLE_LIKE
		SET like_check = 0
		WHERE MIDX=#{midx} AND PIDX=#{pidx}
	</update>

	<select id="countbyLike" resultType="int"
		parameterType="HashMap">
		SELECT COUNT(likeno) as cnt
		FROM TABLE_LIKE
		WHERE PIDX=#{pidx} AND MIDX=#{midx}
	</select>

	<insert id="create" parameterType="HashMap">
		INSERT INTO TABLE_LIKE(likeno, pidx, midx, like_check)
		VALUES ((SELECT NVL(MAX(likeno), 0) + 1 as likeno FROM TABLE_LIKE),
		#{pidx}, #{midx}, 0)
	</insert>

	<delete id="deletebyMidxLike" parameterType="int">
		DELETE FROM TABLE_LIKE
		WHERE MIDX=#{midx}
	</delete>

	<delete id="deletebyPidxLike" parameterType="int">
		DELETE FROM TABLE_LIKE
		WHERE PIDX=#{pidx}
	</delete>

	<select id="readLike" resultType="likeVO"
		parameterType="HashMap">
		SELECT LIKENO, PIDX, MIDX, like_check
		FROM TABLE_LIKE
		WHERE PIDX=#{pidx} AND MIDX=#{midx}
	</select>

	<update id="like_cnt_up" parameterType="int">
		UPDATE TABLE_REPLY
		SET
		PLIKE = plike + 1
		WHERE PIDX=#{pidx} AND MIDX=#{midx}
	</update>

	<update id="like_cnt_down" parameterType="int">
		UPDATE TABLE_REPLY
		SET PLIKE = 0
		WHERE PIDX=#{pidx} AND MIDX=#{midx}
	</update>

</mapper>
